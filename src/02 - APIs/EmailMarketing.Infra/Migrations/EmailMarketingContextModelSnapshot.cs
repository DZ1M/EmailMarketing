// <auto-generated />
using System;
using EmailMarketing.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EmailMarketing.Infra.Migrations
{
    [DbContext(typeof(EmailMarketingContext))]
    partial class EmailMarketingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "unaccent");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EmailMarketing.Domain.Entities.Campanha", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<DateTime?>("AtualizadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("atualizado_em")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid?>("AtualizadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("atualizado_por");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("CriadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("criado_por");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnType("uuid")
                        .HasColumnName("id_empresa");

                    b.Property<Guid>("IdModelo")
                        .HasColumnType("uuid")
                        .HasColumnName("id_modelo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nome");

                    b.Property<string>("TipoMensagem")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasColumnName("tipo_mensagem");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("titulo");

                    b.HasKey("Id");

                    b.HasIndex("IdModelo");

                    b.ToTable("campanhas", "marketing");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.CampanhaContato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("codigo");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("IdCampanha")
                        .HasColumnType("uuid")
                        .HasColumnName("id_mensagem");

                    b.Property<Guid>("IdContato")
                        .HasColumnType("uuid")
                        .HasColumnName("id_contato");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.HasIndex("IdCampanha");

                    b.HasIndex("IdContato");

                    b.ToTable("campanhas_contatos", "marketing");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.CampanhaContatoAcao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<string>("Acao")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasColumnName("acao");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("IdCampanhaContato")
                        .HasColumnType("uuid")
                        .HasColumnName("id_campanha_contato");

                    b.HasKey("Id");

                    b.HasIndex("IdCampanhaContato");

                    b.ToTable("campanhas_contatos_acoes", "marketing");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.CampanhaPasta", b =>
                {
                    b.Property<Guid>("CampanhaId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_campanha");

                    b.Property<Guid>("PastaId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_pasta");

                    b.HasKey("CampanhaId", "PastaId");

                    b.HasIndex("PastaId");

                    b.ToTable("campanhas_pastas", "marketing");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.Contato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<DateTime?>("AtualizadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("atualizado_em")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid?>("AtualizadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("atualizado_por");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("CriadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("criado_por");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnType("uuid")
                        .HasColumnName("id_empresa");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nome");

                    b.Property<string>("Telefone")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("telefone");

                    b.HasKey("Id");

                    b.ToTable("contatos", "marketing");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.ContatoPasta", b =>
                {
                    b.Property<Guid>("ContatoId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_contato");

                    b.Property<Guid>("PastaId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_pasta");

                    b.HasKey("ContatoId", "PastaId");

                    b.HasIndex("PastaId");

                    b.ToTable("contatos_pastas", "marketing");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.Empresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.ToTable("empresas", "auth");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.Modelo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<DateTime?>("AtualizadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("atualizado_em")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid?>("AtualizadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("atualizado_por");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("CriadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("criado_por");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnType("uuid")
                        .HasColumnName("id_empresa");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("texto");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.ToTable("modelos", "marketing");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.Pasta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<DateTime?>("AtualizadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("atualizado_em")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid?>("AtualizadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("atualizado_por");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("CriadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("criado_por");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnType("uuid")
                        .HasColumnName("id_empresa");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.ToTable("pastas", "marketing");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.Permissao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean")
                        .HasColumnName("default_role");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("nome");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("valor");

                    b.HasKey("Id");

                    b.ToTable("permissoes", "auth");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba36b8a8-8012-4f70-8968-c2f1c90e7aef"),
                            Default = false,
                            Nome = "Pasta",
                            Valor = "Create"
                        },
                        new
                        {
                            Id = new Guid("433414bf-89be-43a7-bb2e-9503030db2d4"),
                            Default = false,
                            Nome = "Pasta",
                            Valor = "Read"
                        },
                        new
                        {
                            Id = new Guid("04c1c55b-91dd-4324-8daf-feaac5dd9b02"),
                            Default = false,
                            Nome = "Pasta",
                            Valor = "Update"
                        },
                        new
                        {
                            Id = new Guid("0c2e6d73-4221-4436-8198-8cfc54cb3c9f"),
                            Default = false,
                            Nome = "Pasta",
                            Valor = "Delete"
                        },
                        new
                        {
                            Id = new Guid("39dd716f-bc97-457f-8184-d91ebda93b89"),
                            Default = false,
                            Nome = "Modelo",
                            Valor = "Create"
                        },
                        new
                        {
                            Id = new Guid("d4b03b5a-176e-47c1-9a48-cbd5265ea75e"),
                            Default = false,
                            Nome = "Modelo",
                            Valor = "Read"
                        },
                        new
                        {
                            Id = new Guid("07743798-8f8f-413f-b80b-1b7ef556c6fb"),
                            Default = false,
                            Nome = "Modelo",
                            Valor = "Update"
                        },
                        new
                        {
                            Id = new Guid("1f82f594-b209-4c0d-8fd0-714886e55c71"),
                            Default = false,
                            Nome = "Modelo",
                            Valor = "Delete"
                        },
                        new
                        {
                            Id = new Guid("33f2559c-050d-404d-a832-fc9e6f101e0d"),
                            Default = false,
                            Nome = "Contato",
                            Valor = "Create"
                        },
                        new
                        {
                            Id = new Guid("a3dc6c38-233f-47f3-b367-0bf133554d63"),
                            Default = false,
                            Nome = "Contato",
                            Valor = "Read"
                        },
                        new
                        {
                            Id = new Guid("0733835e-e551-40a5-8f43-e02f93e9781b"),
                            Default = false,
                            Nome = "Contato",
                            Valor = "Update"
                        },
                        new
                        {
                            Id = new Guid("6fb8bba8-9e40-425c-bf01-306bbd9ca5bb"),
                            Default = false,
                            Nome = "Contato",
                            Valor = "Delete"
                        },
                        new
                        {
                            Id = new Guid("40d7bcbe-c075-4bb8-b64c-b21996728ac4"),
                            Default = false,
                            Nome = "Campanha",
                            Valor = "Create"
                        },
                        new
                        {
                            Id = new Guid("829001da-3f4d-4a87-9bcd-f343de65a889"),
                            Default = false,
                            Nome = "Campanha",
                            Valor = "Read"
                        },
                        new
                        {
                            Id = new Guid("3ac31129-b587-422b-8d2d-908c9ad8aec4"),
                            Default = false,
                            Nome = "Campanha",
                            Valor = "Update"
                        },
                        new
                        {
                            Id = new Guid("5c924f23-fffd-4b05-a233-886eeeecc10b"),
                            Default = false,
                            Nome = "Campanha",
                            Valor = "Delete"
                        });
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Descricao")
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("nome");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("senha");

                    b.Property<string>("Telefone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telefone");

                    b.Property<string>("Url")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("url_perfil");

                    b.HasKey("Id");

                    b.ToTable("usuarios", "auth");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.UsuarioEmpresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnType("uuid")
                        .HasColumnName("id_empresa");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uuid")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdUsuario");

                    b.ToTable("usuarios_empresas", "auth");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.UsuarioPermissao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<Guid>("IdPermissao")
                        .HasColumnType("uuid")
                        .HasColumnName("id_permissao");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uuid")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id");

                    b.HasIndex("IdPermissao");

                    b.HasIndex("IdUsuario");

                    b.ToTable("usuarios_permissoes", "auth");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.Campanha", b =>
                {
                    b.HasOne("EmailMarketing.Domain.Entities.Modelo", "Modelo")
                        .WithMany()
                        .HasForeignKey("IdModelo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modelo");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.CampanhaContato", b =>
                {
                    b.HasOne("EmailMarketing.Domain.Entities.Campanha", "Campanha")
                        .WithMany("Contatos")
                        .HasForeignKey("IdCampanha")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmailMarketing.Domain.Entities.Contato", "Contato")
                        .WithMany()
                        .HasForeignKey("IdContato")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campanha");

                    b.Navigation("Contato");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.CampanhaContatoAcao", b =>
                {
                    b.HasOne("EmailMarketing.Domain.Entities.CampanhaContato", null)
                        .WithMany("Acoes")
                        .HasForeignKey("IdCampanhaContato")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.CampanhaPasta", b =>
                {
                    b.HasOne("EmailMarketing.Domain.Entities.Campanha", "Campanha")
                        .WithMany("Pastas")
                        .HasForeignKey("CampanhaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmailMarketing.Domain.Entities.Pasta", "Pasta")
                        .WithMany()
                        .HasForeignKey("PastaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campanha");

                    b.Navigation("Pasta");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.ContatoPasta", b =>
                {
                    b.HasOne("EmailMarketing.Domain.Entities.Contato", "Contato")
                        .WithMany("ContatoPastas")
                        .HasForeignKey("ContatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmailMarketing.Domain.Entities.Pasta", "Pasta")
                        .WithMany("ContatoPastas")
                        .HasForeignKey("PastaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contato");

                    b.Navigation("Pasta");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.UsuarioEmpresa", b =>
                {
                    b.HasOne("EmailMarketing.Domain.Entities.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmailMarketing.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Empresas")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.UsuarioPermissao", b =>
                {
                    b.HasOne("EmailMarketing.Domain.Entities.Permissao", "Permissao")
                        .WithMany()
                        .HasForeignKey("IdPermissao")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmailMarketing.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Permissoes")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permissao");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.Campanha", b =>
                {
                    b.Navigation("Contatos");

                    b.Navigation("Pastas");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.CampanhaContato", b =>
                {
                    b.Navigation("Acoes");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.Contato", b =>
                {
                    b.Navigation("ContatoPastas");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.Pasta", b =>
                {
                    b.Navigation("ContatoPastas");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Empresas");

                    b.Navigation("Permissoes");
                });
#pragma warning restore 612, 618
        }
    }
}
