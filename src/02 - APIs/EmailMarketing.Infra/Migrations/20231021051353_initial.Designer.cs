// <auto-generated />
using System;
using EmailMarketing.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EmailMarketing.Infra.Migrations
{
    [DbContext(typeof(EmailMarketingContext))]
    [Migration("20231021051353_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "unaccent");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EmailMarketing.Domain.Entities.Campanha", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<DateTime?>("AtualizadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("atualizado_em")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid?>("AtualizadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("atualizado_por");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("CriadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("criado_por");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnType("uuid")
                        .HasColumnName("id_empresa");

                    b.Property<Guid>("IdModelo")
                        .HasColumnType("uuid")
                        .HasColumnName("id_modelo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nome");

                    b.Property<string>("TipoMensagem")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasColumnName("tipo_mensagem");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("titulo");

                    b.HasKey("Id");

                    b.HasIndex("IdModelo");

                    b.ToTable("campanhas", "marketing");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.CampanhaContato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("codigo");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("IdCampanha")
                        .HasColumnType("uuid")
                        .HasColumnName("id_mensagem");

                    b.Property<Guid>("IdContato")
                        .HasColumnType("uuid")
                        .HasColumnName("id_contato");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.HasIndex("IdCampanha");

                    b.HasIndex("IdContato");

                    b.ToTable("campanhas_contatos", "marketing");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.CampanhaContatoAcao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<string>("Acao")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasColumnName("acao");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("IdCampanhaContato")
                        .HasColumnType("uuid")
                        .HasColumnName("id_campanha_contato");

                    b.HasKey("Id");

                    b.HasIndex("IdCampanhaContato");

                    b.ToTable("campanhas_contatos_acoes", "marketing");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.CampanhaPasta", b =>
                {
                    b.Property<Guid>("CampanhaId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_campanha");

                    b.Property<Guid>("PastaId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_pasta");

                    b.HasKey("CampanhaId", "PastaId");

                    b.HasIndex("PastaId");

                    b.ToTable("campanhas_pastas", "marketing");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.Contato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<DateTime?>("AtualizadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("atualizado_em")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid?>("AtualizadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("atualizado_por");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("CriadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("criado_por");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnType("uuid")
                        .HasColumnName("id_empresa");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nome");

                    b.Property<string>("Telefone")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("telefone");

                    b.HasKey("Id");

                    b.ToTable("contatos", "marketing");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.ContatoPasta", b =>
                {
                    b.Property<Guid>("ContatoId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_contato");

                    b.Property<Guid>("PastaId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_pasta");

                    b.HasKey("ContatoId", "PastaId");

                    b.HasIndex("PastaId");

                    b.ToTable("contatos_pastas", "marketing");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.Empresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.ToTable("empresas", "auth");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.Modelo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<DateTime?>("AtualizadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("atualizado_em")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid?>("AtualizadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("atualizado_por");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("CriadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("criado_por");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnType("uuid")
                        .HasColumnName("id_empresa");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("texto");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.ToTable("modelos", "marketing");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.Pasta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<DateTime?>("AtualizadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("atualizado_em")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid?>("AtualizadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("atualizado_por");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("CriadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("criado_por");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnType("uuid")
                        .HasColumnName("id_empresa");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.ToTable("pastas", "marketing");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.Permissao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean")
                        .HasColumnName("default_role");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("nome");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("valor");

                    b.HasKey("Id");

                    b.ToTable("permissoes", "auth");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8173638e-4297-44cd-a247-04538ef85f64"),
                            Default = true,
                            Nome = "Pasta",
                            Valor = "Create"
                        },
                        new
                        {
                            Id = new Guid("de48cddc-8260-4bee-b781-a89a9c157413"),
                            Default = true,
                            Nome = "Pasta",
                            Valor = "Read"
                        },
                        new
                        {
                            Id = new Guid("5a550165-04b5-4de8-9203-8e0ebf099c7e"),
                            Default = true,
                            Nome = "Pasta",
                            Valor = "Update"
                        },
                        new
                        {
                            Id = new Guid("13c7e4b6-6565-4c2a-a851-56b6ccf47e17"),
                            Default = true,
                            Nome = "Pasta",
                            Valor = "Delete"
                        },
                        new
                        {
                            Id = new Guid("49ffa2e4-64bf-4ca2-a14d-18d96d3eede6"),
                            Default = true,
                            Nome = "Modelo",
                            Valor = "Create"
                        },
                        new
                        {
                            Id = new Guid("622b1f13-9256-4abb-8e86-b8cb3396b524"),
                            Default = true,
                            Nome = "Modelo",
                            Valor = "Read"
                        },
                        new
                        {
                            Id = new Guid("f259fb96-bd94-43af-81d5-7663d7b4b6cb"),
                            Default = true,
                            Nome = "Modelo",
                            Valor = "Update"
                        },
                        new
                        {
                            Id = new Guid("b4e4888a-8f52-4119-b5a4-80bf88b37c2c"),
                            Default = true,
                            Nome = "Modelo",
                            Valor = "Delete"
                        },
                        new
                        {
                            Id = new Guid("7ae7c925-00e8-4abe-bc1c-102e0a87a7d2"),
                            Default = true,
                            Nome = "Contato",
                            Valor = "Create"
                        },
                        new
                        {
                            Id = new Guid("7dcfd277-66fd-4c48-90d3-6658860edc4e"),
                            Default = true,
                            Nome = "Contato",
                            Valor = "Read"
                        },
                        new
                        {
                            Id = new Guid("7438c5ca-28a5-4fef-b315-0f152984c91b"),
                            Default = true,
                            Nome = "Contato",
                            Valor = "Update"
                        },
                        new
                        {
                            Id = new Guid("68daa0cf-b018-4291-aaf1-da81e7501e82"),
                            Default = true,
                            Nome = "Contato",
                            Valor = "Delete"
                        },
                        new
                        {
                            Id = new Guid("e100c931-63d1-4d31-be14-97f3d8d2b2c6"),
                            Default = true,
                            Nome = "Campanha",
                            Valor = "Create"
                        },
                        new
                        {
                            Id = new Guid("0b9178c6-926f-43c7-b849-0ecd292f30e5"),
                            Default = true,
                            Nome = "Campanha",
                            Valor = "Read"
                        },
                        new
                        {
                            Id = new Guid("faae2d77-3123-4079-8518-f927bdeb635b"),
                            Default = true,
                            Nome = "Campanha",
                            Valor = "Update"
                        },
                        new
                        {
                            Id = new Guid("1aa3f85a-11d0-4473-9a74-19c25767973a"),
                            Default = true,
                            Nome = "Campanha",
                            Valor = "Delete"
                        });
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Descricao")
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("nome");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("senha");

                    b.Property<string>("Telefone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telefone");

                    b.Property<string>("Url")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("url_perfil");

                    b.HasKey("Id");

                    b.ToTable("usuarios", "auth");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.UsuarioEmpresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnType("uuid")
                        .HasColumnName("id_empresa");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uuid")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdUsuario");

                    b.ToTable("usuarios_empresas", "auth");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.UsuarioPermissao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<Guid>("IdPermissao")
                        .HasColumnType("uuid")
                        .HasColumnName("id_permissao");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uuid")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id");

                    b.HasIndex("IdPermissao");

                    b.HasIndex("IdUsuario");

                    b.ToTable("usuarios_permissoes", "auth");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.Campanha", b =>
                {
                    b.HasOne("EmailMarketing.Domain.Entities.Modelo", "Modelo")
                        .WithMany()
                        .HasForeignKey("IdModelo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modelo");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.CampanhaContato", b =>
                {
                    b.HasOne("EmailMarketing.Domain.Entities.Campanha", "Campanha")
                        .WithMany("Contatos")
                        .HasForeignKey("IdCampanha")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmailMarketing.Domain.Entities.Contato", "Contato")
                        .WithMany()
                        .HasForeignKey("IdContato")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campanha");

                    b.Navigation("Contato");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.CampanhaContatoAcao", b =>
                {
                    b.HasOne("EmailMarketing.Domain.Entities.CampanhaContato", null)
                        .WithMany("Acoes")
                        .HasForeignKey("IdCampanhaContato")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.CampanhaPasta", b =>
                {
                    b.HasOne("EmailMarketing.Domain.Entities.Campanha", "Campanha")
                        .WithMany("Pastas")
                        .HasForeignKey("CampanhaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmailMarketing.Domain.Entities.Pasta", "Pasta")
                        .WithMany()
                        .HasForeignKey("PastaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campanha");

                    b.Navigation("Pasta");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.ContatoPasta", b =>
                {
                    b.HasOne("EmailMarketing.Domain.Entities.Contato", "Contato")
                        .WithMany("ContatoPastas")
                        .HasForeignKey("ContatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmailMarketing.Domain.Entities.Pasta", "Pasta")
                        .WithMany("ContatoPastas")
                        .HasForeignKey("PastaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contato");

                    b.Navigation("Pasta");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.UsuarioEmpresa", b =>
                {
                    b.HasOne("EmailMarketing.Domain.Entities.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmailMarketing.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Empresas")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.UsuarioPermissao", b =>
                {
                    b.HasOne("EmailMarketing.Domain.Entities.Permissao", "Permissao")
                        .WithMany()
                        .HasForeignKey("IdPermissao")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmailMarketing.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Permissoes")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permissao");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.Campanha", b =>
                {
                    b.Navigation("Contatos");

                    b.Navigation("Pastas");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.CampanhaContato", b =>
                {
                    b.Navigation("Acoes");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.Contato", b =>
                {
                    b.Navigation("ContatoPastas");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.Pasta", b =>
                {
                    b.Navigation("ContatoPastas");
                });

            modelBuilder.Entity("EmailMarketing.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Empresas");

                    b.Navigation("Permissoes");
                });
#pragma warning restore 612, 618
        }
    }
}
